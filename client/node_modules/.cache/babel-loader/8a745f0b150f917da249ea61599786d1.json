{"ast":null,"code":"var _jsxFileName = \"/Users/michalstachnik/Documents/btc-transaction-streamer/src/components/Graph/Graph.tsx\";\nimport React, { Component } from 'react';\nimport Chart from 'chart.js';\nimport './Graph.css';\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      const blob = await fetch('api.blockchain.info/charts/hash-rate?format=json');\n      const data = await blob.json();\n      console.log('DATA', data);\n      const canvas = document.getElementById('chart');\n      const ctx = canvas.getContext('2d');\n      const myChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n          datasets: [{\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2, 3],\n            backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n            borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            yAxes: [{\n              ticks: {\n                beginAtZero: true\n              }\n            }]\n          }\n        }\n      });\n    };\n\n    this.state = {};\n  }\n\n  render() {\n    return React.createElement(\"canvas\", {\n      id: \"chart\",\n      width: \"500px\",\n      height: \"500px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/Users/michalstachnik/Documents/btc-transaction-streamer/src/components/Graph/Graph.tsx"],"names":["React","Component","Chart","Graph","constructor","props","componentDidMount","blob","fetch","data","json","console","log","canvas","document","getElementById","ctx","getContext","myChart","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","yAxes","ticks","beginAtZero","state","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAGA,OAAO,aAAP;;AAEA,MAAMC,KAAN,SAAoBF,SAApB,CAAsC;AAClCG,EAAAA,WAAW,CAACC,KAAD,EAAa;AACpB,UAAMA,KAAN;;AADoB,SASxBC,iBATwB,GASJ,YAAY;AAC5B,YAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,kDAAD,CAAxB;AACA,YAAMC,IAAI,GAAG,MAAMF,IAAI,CAACG,IAAL,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBH,IAApB;AAEA,YAAMI,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAf;AACA,YAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AACA,YAAMC,OAAO,GAAG,IAAIhB,KAAJ,CAAUc,GAAV,EAAe;AAC3BG,QAAAA,IAAI,EAAE,KADqB;AAE3BV,QAAAA,IAAI,EAAE;AACFW,UAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,QAAnC,EAA6C,QAA7C,CADN;AAEFC,UAAAA,QAAQ,EAAE,CAAC;AACPC,YAAAA,KAAK,EAAE,YADA;AAEPb,YAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFC;AAGPc,YAAAA,eAAe,EAAE,CACb,yBADa,EAEb,yBAFa,EAGb,yBAHa,EAIb,yBAJa,EAKb,0BALa,EAMb,yBANa,CAHV;AAWPC,YAAAA,WAAW,EAAE,CACT,uBADS,EAET,uBAFS,EAGT,uBAHS,EAIT,uBAJS,EAKT,wBALS,EAMT,uBANS,CAXN;AAmBPC,YAAAA,WAAW,EAAE;AAnBN,WAAD;AAFR,SAFqB;AA0B3BC,QAAAA,OAAO,EAAE;AACLC,UAAAA,MAAM,EAAE;AACJC,YAAAA,KAAK,EAAE,CAAC;AACJC,cAAAA,KAAK,EAAE;AACHC,gBAAAA,WAAW,EAAE;AADV;AADH,aAAD;AADH;AADH;AA1BkB,OAAf,CAAhB;AAoCH,KApDuB;;AAGpB,SAAKC,KAAL,GAAa,EAAb;AAGH;;AAgDDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAQ,MAAA,EAAE,EAAC,OAAX;AAAmB,MAAA,KAAK,EAAC,OAAzB;AAAiC,MAAA,MAAM,EAAC,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAKH;;AA7DiC;;AAgEtC,eAAe7B,KAAf","sourcesContent":["import React, { Component }  from 'react';\nimport Chart from 'chart.js';\n\n\nimport './Graph.css';\n\nclass Graph extends Component<{}, {}> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            \n        }\n    }\n\n\n    componentDidMount = async () => {\n        const blob = await fetch('api.blockchain.info/charts/hash-rate?format=json');\n        const data = await blob.json()\n        console.log('DATA', data);\n\n        const canvas = document.getElementById('chart') as HTMLCanvasElement;\n        const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n        const myChart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n                datasets: [{\n                    label: '# of Votes',\n                    data: [12, 19, 3, 5, 2, 3],\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 159, 64, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(255, 159, 64, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true\n                        }\n                    }]\n                }\n            }\n        });\n    }\n\n    render() {\n        return (\n            <canvas id='chart' width='500px' height='500px'>\n                \n            </canvas>\n        );\n    }\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}