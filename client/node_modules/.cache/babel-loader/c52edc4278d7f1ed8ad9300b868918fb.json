{"ast":null,"code":"var _jsxFileName = \"/Users/michalstachnik/Documents/btc-transaction-streamer/src/components/BlockList/BlockList.tsx\";\nimport React, { Component } from 'react';\nimport Block from '../Block/Block';\nimport './BlockList.css';\n\nclass BlockList extends Component {\n  constructor(props) {\n    super(props);\n    this.WS = new WebSocket('wss://ws.blockchain.info/inv');\n\n    this.componentDidMount = () => {\n      this.WS.onopen = () => {\n        console.log('connected');\n        const op = {\n          \"op\": \"unconfirmed_sub\"\n        };\n        this.WS.send(JSON.stringify(op));\n        this.props.toggleLoading();\n      }; // Getting new transaction data and updating state\n\n\n      this.WS.onmessage = event => {\n        // let performance: any = window.performance;\n        // console.log(performance.memory);\n        // Add one event to array\n        this.setState((prevState, prevProps) => {\n          return {\n            transactionStream: [...prevState.transactionStream, event.data]\n          };\n        }, () => {\n          // Close connection after 100 entries\n          if (this.state.transactionStream.length === 100) {\n            console.log('closing web socket :(');\n            this.WS.close();\n            this.props.toggleLoading();\n          }\n        });\n      };\n    };\n\n    this.state = {\n      transactionStream: []\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"block-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, this.state.transactionStream.map((block, index) => React.createElement(Block, {\n      block: block,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default BlockList;","map":{"version":3,"sources":["/Users/michalstachnik/Documents/btc-transaction-streamer/src/components/BlockList/BlockList.tsx"],"names":["React","Component","Block","BlockList","constructor","props","WS","WebSocket","componentDidMount","onopen","console","log","op","send","JSON","stringify","toggleLoading","onmessage","event","setState","prevState","prevProps","transactionStream","data","state","length","close","render","map","block","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,OAAO,iBAAP;;AAEA,MAAMC,SAAN,SAAwBF,SAAxB,CAAgH;AAC9GG,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;AADsB,SAQxBC,EARwB,GAQnB,IAAIC,SAAJ,CAAc,8BAAd,CARmB;;AAAA,SAUxBC,iBAVwB,GAUJ,MAAM;AAExB,WAAKF,EAAL,CAAQG,MAAR,GAAiB,MAAM;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,cAAMC,EAAE,GAAG;AAAC,gBAAK;AAAN,SAAX;AACA,aAAKN,EAAL,CAAQO,IAAR,CAAaC,IAAI,CAACC,SAAL,CAAeH,EAAf,CAAb;AACA,aAAKP,KAAL,CAAWW,aAAX;AACD,OALD,CAFwB,CASxB;;;AACA,WAAKV,EAAL,CAAQW,SAAR,GAAqBC,KAAD,IAAW;AAC7B;AACA;AACA;AACA,aAAKC,QAAL,CAAc,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,iBAAO;AAAEC,YAAAA,iBAAiB,EAAE,CAAC,GAAGF,SAAS,CAACE,iBAAd,EAAiCJ,KAAK,CAACK,IAAvC;AAArB,WAAP;AACD,SAFD,EAEG,MAAM;AACP;AACA,cAAI,KAAKC,KAAL,CAAWF,iBAAX,CAA6BG,MAA7B,KAAwC,GAA5C,EAAgD;AAC9Cf,YAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,iBAAKL,EAAL,CAAQoB,KAAR;AACA,iBAAKrB,KAAL,CAAWW,aAAX;AACD;AACF,SATD;AAUD,OAdD;AAeD,KAnCuB;;AAGtB,SAAKQ,KAAL,GAAa;AACXF,MAAAA,iBAAiB,EAAE;AADR,KAAb;AAGD;;AA+BDK,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAKH,KAAL,CAAWF,iBAAX,CAA6BM,GAA7B,CAAiC,CAACC,KAAD,EAAQC,KAAR,KAAkB,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAED,KAAd;AAAqB,MAAA,GAAG,EAAEC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAnD,CADJ,CADF;AAKD;;AA5C6G;;AA+ChH,eAAe3B,SAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport Block from '../Block/Block';\n\nimport './BlockList.css';\n\nclass BlockList extends Component<{ toggleLoading: any } & { className: string }, { transactionStream: any[] }> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      transactionStream: []\n    }\n  }\n\n  WS = new WebSocket('wss://ws.blockchain.info/inv')\n\n  componentDidMount = () => {\n\n    this.WS.onopen = () => {\n      console.log('connected');\n      const op = {\"op\":\"unconfirmed_sub\"};\n      this.WS.send(JSON.stringify(op));\n      this.props.toggleLoading();\n    }\n\n    // Getting new transaction data and updating state\n    this.WS.onmessage = (event) => {\n      // let performance: any = window.performance;\n      // console.log(performance.memory);\n      // Add one event to array\n      this.setState((prevState, prevProps) => {\n        return { transactionStream: [...prevState.transactionStream, event.data] }\n      }, () => {\n        // Close connection after 100 entries\n        if (this.state.transactionStream.length === 100){\n          console.log('closing web socket :(');\n          this.WS.close();\n          this.props.toggleLoading();\n        }\n      });  \n    }\n  }\n\n  render() {\n    return (\n      <div className=\"block-list\">\n        { this.state.transactionStream.map((block, index) => <Block block={block} key={index} />) }\n      </div>\n    );\n  }\n}\n\nexport default BlockList;"]},"metadata":{},"sourceType":"module"}